datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// Authentication
model User {
  id             Int        @id @default(autoincrement())
  role           Role       @default(user) 
  name           String
  email          String     @unique
  password       String
  oauth_id       String?    @unique
  image          String?    // Optional fields
  oauth_provider String?    // Optional fields
  location       String?    // Optional fields
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt

  Achievement    Achievement[]
}

// Role enum with @@map attribute
enum Role {
  admin
  user
}

// Units
model Unit {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  status      Int    @default(0) // 0 = draft, 1 = published
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  achievements Achievement[]
  sections    Section[]

}

// Sections
model Section {
  id          Int      @id @default(autoincrement())
  unit_id     Int
  title       String
  description String?
  status      Int  @default(0) // 0 = draft, 1 = published
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  questions   Question[]
  unit        Unit     @relation(fields: [unit_id], references: [id])

  @@index([unit_id])
}

// Questions
model Question {
  id          Int      @id @default(autoincrement())
  section_id     Int
  title       String
  description String?
  status      Int  @default(0) // 0 = draft, 1 = published
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  section     Section @relation(fields: [section_id], references: [id])
  answers     Answer[]

  @@index([section_id])
}

// Answers
model Answer {
  id          Int      @id @default(autoincrement())
  question_id Int
  answer      String
  is_correct  Boolean
  status      Int  @default(0) // 0 = draft, 1 = published
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  question    Question @relation(fields: [question_id], references: [id])

  @@index([question_id])
}

// Achievements
model Achievement {
  id           Int        @id @default(autoincrement())
  user_id      Int
  unit_id    Int
  correct      Int        @default(0)
  total        Int        @default(0)
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  user         User       @relation(fields: [user_id], references: [id])
  unit       Unit     @relation(fields: [unit_id], references: [id])

  @@index([user_id])
  @@index([unit_id])
}

